name: Deploy Production Build to Firebase

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Update Versions
  update_versions:
    name: Generate Beta Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update build version
        run: |
          currentTag="$(git describe --match "*-RC*" --abbrev=0 --tags || echo "0.0.0-RC0")"
          versionNameInput="${currentTag}"
          sed -i "0,/versionName/{s/versionName = .*/versionName = \\\"${versionNameInput}\\\"/}" app/build.gradle.kts

          currentVersionCode=$(grep "versionCode" app/build.gradle.kts | awk -F '=' '{print $2}' | tr -d ' ')
          versionCodeInput=$((currentVersionCode + 1))
          sed -i "0,/versionCode/{s/versionCode =.*/versionCode = ${versionCodeInput}/}" app/build.gradle.kts

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build AAB
  build_aab:
    name: Build Production AAB
    runs-on: ubuntu-latest
    needs: update_versions
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up production properties
        env:
          ENV_PROPERTIES: ${{ secrets.ENV_PROPERTIES }}
        run: |
          echo -e $ENV_PROPERTIES > production.properties

      - name: Set up Google Services JSON
        env:
          FIREBASE_GOOGLE_SERVICES_JSON: ${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}
        run: |
          echo $FIREBASE_GOOGLE_SERVICES_JSON > app/google-services.json

      - name: Set up signing properties
        env:
          SIGNING_PROPERTIES: ${{ secrets.SIGNING_PROPERTIES }}
        run: echo -e "$SIGNING_PROPERTIES" > signing.properties

      - name: Build .AAB
        run: bash ./gradlew :app:bundleRelease --stacktrace
      - name: Sign Android release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/prodRelease
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

  # Job 3: Generate Release Notes
  generate_release_notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: build_aab
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: generate-release-notes
        run: |
          echo 'RELEASE_NOTE_CONTENT<<EOF' >> $GITHUB_OUTPUT
          echo "$(git log --pretty=%B $(git describe --tags $(git rev-list --tags --max-count=1))..HEAD | grep "\[")" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  # Job 4: Deploy to Firebase
  deploy_to_firebase:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: [build_aab, generate_release_notes]
    steps:
      - name: Deploy Android Production to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1.5.0
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_DISTRIBUTION_CREDENTIAL_JSON }}
          groups: testers
          file: app/build/outputs/bundle/prodRelease/app-prod-release.aab
          releaseNotes: ${{ steps.generate-release-notes.outputs.RELEASE_NOTE_CONTENT }}
